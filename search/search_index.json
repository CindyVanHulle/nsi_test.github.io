{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Test/","text":"I'm a test","title":"Test"},{"location":"tri_ter/","text":"Principe On dispose d'un empilement de cr\u00eapes que l'on souhaite les ranger dans l'ordre croissant, la cr\u00eape la plus petite en haut. Pour cel\u00e0, vous ne disposez que d'un seul type op\u00e9ration : glisser une spatule sous une cr\u00eape et retourner tout l'empilement de cr\u00eapes se trouvant sur votre spatule. Consigne Nous utiliserons une liste pour repr\u00e9senter notre empilement de cr\u00eapes. Le sommet de l'empilement sera le premier \u00e9l\u00e9ment de la liste. Les cr\u00eapes sont repr\u00e9sent\u00e9es par des nombres, plus son nombre est grand plus la cr\u00eape est grande. Liste fonctions retourner_crepe( empilement : list) , n : (int) : retourne n cr\u00eape. plus_grande_crepe(empilement : list, n : int) -> int : Cherche la plus grande crepe dans l'empilement. placer_crepe_au_sommet(empilement : list, n : int) -> int : place la cr\u00eape au sommet. tri_crepe(empilement : list) : r\u00e9alise le tri cr\u00eape Impl\u00e9mentation Commen\u00e7ons par la fonction retourner_crepe( empilement : list) , n : (int) qui prend un empilement de crepe, un entier n repr\u00e9sentant l'emplacement de la spatule et retourne ainsi les cr\u00eapes sur la spatule def retourner_crepe(empilement,n): \"\"\" Retourne les n cr\u00eapes du haut :param empilement: (list) liste repr\u00e9sentant l'empilement de cr\u00eapes :param n: (int) nombre de cr\u00eapes \u00e0 retourner :return: None : Examples : >>> l = [5, 3, 4, 7, 9, 8, 1, 2] >>> retourner_crepe(l,4) >>> l >>> [7, 4, 3, 5, 9, 8, 1, 2] \"\"\" pass D\u00e9sormais, nous allons rechercher l'indice de la plus grande cr\u00eape parmis un certain nombres. La fonction plus_grande_crepe(empilement : list, n : int) -> int qui prend un empilement de crepe, un entier n repr\u00e9sentant la tranche parmis laquelle on recherche la plus grande cr\u00eape. Cette fonction renverra l'indice dans la liste de la plus grande cr\u00eape. def plus_grande_crepe(empilement,n): \"\"\" Renvoie l'indice de la plus grande cr\u00eape parmis les n premi\u00e8res :param empilement: (list) liste repr\u00e9sentant l'empilement de cr\u00eapes :param n: (int) nombre de cr\u00eapes :return: (int) indice de la plus grande cr\u00eape : Examples : >>> l = [5, 3, 4, 7, 9, 8, 1, 2] >>> plus_grande_crepe(l,4) >>> 3 \"\"\" pass Ensuite, nous allons placer une crepe au sommet. La fonction placer_crepe_au_sommet(empilement : list, n : int) -> int qui prend un empilement de crepe, un entier n repr\u00e9sentant le nombre de cr\u00eape \u00e0 retourner. Une m\u00e9thode serait de chercher la plus grande cr\u00eapes parmis les n premi\u00e8res, de retourner toutes les jusqu'\u00e0 la plus grande, puis de retourner toutes les cr\u00eapes. def placer_crepe_au_sommet(empilement,n): \"\"\" Place la plus grande cr\u00eape au sommet de la pile de cr\u00eape Rep\u00e8re la plus grande cr\u00eape parmi les n premi\u00e8res Retourne l'empilement de cr\u00eapes en placant la spatule sous cette plus grande cr\u00eape Puis retourne les n cr\u00eapes du sommet :param empilement: (list) liste repr\u00e9sentant l'empilement de cr\u00eapes :param n: (int) nombre de cr\u00eapes \u00e0 retourner :return: None : Examples : >>> l = [5, 3, 4, 7, 9, 8, 1, 2] >>> placer_crepe_au_sommet(l,8) >>> l [2, 1, 8, 5, 3, 4, 7, 9] \"\"\" pass Il est temps d'impl\u00e9menter l'algorithme tri_crepe(empilement : list) . def tri_crepe(empilement): \"\"\" Effectue le tri cr\u00eape :param empilement: (list) liste repr\u00e9sentant l'empilement de cr\u00eapes :return: None \"\"\" pass F\u00e9licitations , vous avez impl\u00e9menter le tri cr\u00eape !","title":"tri_ter"},{"location":"tri_ter/#principe","text":"On dispose d'un empilement de cr\u00eapes que l'on souhaite les ranger dans l'ordre croissant, la cr\u00eape la plus petite en haut. Pour cel\u00e0, vous ne disposez que d'un seul type op\u00e9ration : glisser une spatule sous une cr\u00eape et retourner tout l'empilement de cr\u00eapes se trouvant sur votre spatule.","title":"Principe"},{"location":"tri_ter/#consigne","text":"Nous utiliserons une liste pour repr\u00e9senter notre empilement de cr\u00eapes. Le sommet de l'empilement sera le premier \u00e9l\u00e9ment de la liste. Les cr\u00eapes sont repr\u00e9sent\u00e9es par des nombres, plus son nombre est grand plus la cr\u00eape est grande.","title":"Consigne"},{"location":"tri_ter/#liste-fonctions","text":"retourner_crepe( empilement : list) , n : (int) : retourne n cr\u00eape. plus_grande_crepe(empilement : list, n : int) -> int : Cherche la plus grande crepe dans l'empilement. placer_crepe_au_sommet(empilement : list, n : int) -> int : place la cr\u00eape au sommet. tri_crepe(empilement : list) : r\u00e9alise le tri cr\u00eape","title":"Liste fonctions"},{"location":"tri_ter/#implementation","text":"Commen\u00e7ons par la fonction retourner_crepe( empilement : list) , n : (int) qui prend un empilement de crepe, un entier n repr\u00e9sentant l'emplacement de la spatule et retourne ainsi les cr\u00eapes sur la spatule def retourner_crepe(empilement,n): \"\"\" Retourne les n cr\u00eapes du haut :param empilement: (list) liste repr\u00e9sentant l'empilement de cr\u00eapes :param n: (int) nombre de cr\u00eapes \u00e0 retourner :return: None : Examples : >>> l = [5, 3, 4, 7, 9, 8, 1, 2] >>> retourner_crepe(l,4) >>> l >>> [7, 4, 3, 5, 9, 8, 1, 2] \"\"\" pass D\u00e9sormais, nous allons rechercher l'indice de la plus grande cr\u00eape parmis un certain nombres. La fonction plus_grande_crepe(empilement : list, n : int) -> int qui prend un empilement de crepe, un entier n repr\u00e9sentant la tranche parmis laquelle on recherche la plus grande cr\u00eape. Cette fonction renverra l'indice dans la liste de la plus grande cr\u00eape. def plus_grande_crepe(empilement,n): \"\"\" Renvoie l'indice de la plus grande cr\u00eape parmis les n premi\u00e8res :param empilement: (list) liste repr\u00e9sentant l'empilement de cr\u00eapes :param n: (int) nombre de cr\u00eapes :return: (int) indice de la plus grande cr\u00eape : Examples : >>> l = [5, 3, 4, 7, 9, 8, 1, 2] >>> plus_grande_crepe(l,4) >>> 3 \"\"\" pass Ensuite, nous allons placer une crepe au sommet. La fonction placer_crepe_au_sommet(empilement : list, n : int) -> int qui prend un empilement de crepe, un entier n repr\u00e9sentant le nombre de cr\u00eape \u00e0 retourner. Une m\u00e9thode serait de chercher la plus grande cr\u00eapes parmis les n premi\u00e8res, de retourner toutes les jusqu'\u00e0 la plus grande, puis de retourner toutes les cr\u00eapes. def placer_crepe_au_sommet(empilement,n): \"\"\" Place la plus grande cr\u00eape au sommet de la pile de cr\u00eape Rep\u00e8re la plus grande cr\u00eape parmi les n premi\u00e8res Retourne l'empilement de cr\u00eapes en placant la spatule sous cette plus grande cr\u00eape Puis retourne les n cr\u00eapes du sommet :param empilement: (list) liste repr\u00e9sentant l'empilement de cr\u00eapes :param n: (int) nombre de cr\u00eapes \u00e0 retourner :return: None : Examples : >>> l = [5, 3, 4, 7, 9, 8, 1, 2] >>> placer_crepe_au_sommet(l,8) >>> l [2, 1, 8, 5, 3, 4, 7, 9] \"\"\" pass Il est temps d'impl\u00e9menter l'algorithme tri_crepe(empilement : list) . def tri_crepe(empilement): \"\"\" Effectue le tri cr\u00eape :param empilement: (list) liste repr\u00e9sentant l'empilement de cr\u00eapes :return: None \"\"\" pass F\u00e9licitations , vous avez impl\u00e9menter le tri cr\u00eape !","title":"Impl\u00e9mentation"}]}